name: CICD Pipeline 

on:
  push:
    branches: [ "main" ] 

jobs: 

  security-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Trivy Installation
      run: |
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update -y
        sudo apt-get install -y trivy
    - name: Gitleaks Installation
      run: sudo apt install gitleaks -y
    - name: Gitleaks Code Scan
      run: gitleaks detect source . -r gitleaks-report.json -f json
      
  sonar_scan:
    runs-on: ubuntu-latest
    needs: security-check
    steps:  
    - uses: actions/checkout@v4
      with:
        # Disabling shallow clones is recommended for improving the relevancy of reporting
        fetch-depth: 0
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v5.0.0
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
      with:
        args: >
          -Dsonar.projectKey=my-nodejs-project
          -Dsonar.projectName=MyNodeJSProject
          -Dsonar.sources=.
          -Dsonar.language=js
          -Dsonar.host.url=${{ vars.SONAR_HOST_URL }}
          -Dsonar.token=${{ secrets.SONAR_TOKEN }}
  build_docker_image_and_push:
      runs-on: ubuntu-latest
      needs: sonar_scan
      steps:
      - uses: actions/checkout@v4    
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: rocks3/feeding-hope:latest
          file: ./Dockerfile

  deploy:
    runs-on: ubuntu-latest
    needs: [sonar_scan, security-check,build_docker_image_and_push]  # Deploy only if SonarQube & Prometheus checks pass
    steps:
      - name: SSH into EC2 and Deploy Docker Containers
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            echo "ðŸ”¹ Installing Docker on EC2..."
            # Install Docker if it's not already installed
            if ! command -v docker &> /dev/null
            then
              echo "Docker not found. Installing Docker..."
              sudo apt-get update
              sudo apt-get install -y docker.io
              sudo systemctl enable --now docker
            else
              echo "Docker is already installed."
            fi
  
            echo "ðŸ”¹ Creating .env file for MongoDB URI..."
            echo "MONGO_URI=${{ secrets.MONGO_URI }}" > .env
            
            echo "ðŸ”¹ Starting MongoDB container..."
            sudo docker run -d --name mongodb -p 27017:27017 mongo
  
            echo "ðŸ”¹ Starting Food Donation App container..."
            sudo docker run -d --name food-donation-app --link mongodb:mongo --env-file .env -p 5000:5000 rocks3/feeding-hope:latest
  
            echo "ðŸ”¹ Deployment complete!"
